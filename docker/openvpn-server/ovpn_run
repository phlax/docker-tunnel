#!/bin/bash

#
# Run the OpenVPN server normally
#

if [ "$DEBUG" == "1" ]; then
  set -x
fi

set -e

cd "$OPENVPN"

# Build runtime arguments array based on environment
USER_ARGS=("${@}")
ARGS=()


setup_dns_names () {
    local address name retries
    for name in $OPENVPN_DNS_NAMES; do
	retries=0
	until [ -n "$(getent hosts "$name" | awk '{ print $1 }')" ] || [ $retries -lt 25 ]; do
            retries=$(("retries + 1"))
            sleep .2;
	done
	address=$(getent hosts "$name" | awk '{ print $1 }')
	if [ -z "$address" ]; then
            echo "WARNING: cannot resolve route to $name, no routes have been added"
	    return
	fi
	echo "Added address for $name: $address"
	echo "$name" >> /etc/openvpn/dns-names
    done
}

add_control_socket () {
    if [ -n "$OVPN_MANAGEMENT_SOCKET" ]; then
	echo "Adding management socket on: $OVPN_MANAGEMENT_SOCKET"
	echo "management $OVPN_MANAGEMENT_SOCKET" >> /etc/openvpn/openvpn.conf
    fi
}

mangle_templates () {
    export OVPN_SERVER=${OVPN_SERVER:-192.168.255.0/24}
    address=$(ipcalc -n "$OVPN_SERVER" | cut -d"=" -f2)
    netmask=$(ipcalc -m "$OVPN_SERVER" | cut -d"=" -f2)
    export SERVER="$address $netmask"
    envsubst '${VPN_SERVER_NAME} ${SERVER}' < /etc/openvpn/server.conf.template > /etc/openvpn/openvpn.conf
    for client_network in $OVPN_CLIENT_NETWORKS; do
	network=$(echo "$client_network" | cut -d: -f2)
	netmask=$(echo "$client_network" | cut -d: -f3)
	echo "route ${network} ${netmask}" >> /etc/openvpn/openvpn.conf
    done
    envsubst '$VPN_SERVER_NAME $OVPN_SERVER $OVPN_ROUTES $OVPN_MANAGEMENT_SOCKET' < /etc/openvpn/ovpn_env.sh.template > /etc/openvpn/ovpn_env.sh
    echo "#### CONFIG"
    cat /etc/openvpn/openvpn.conf
    echo "#### ENDCONFIG"
}


# Checks if ARGS already contains the given value
function hasArg {
    local element
    for element in "${@:2}"; do
        [ "${element}" == "${1}" ] && return 0
    done
    return 1
}

# Adds the given argument if it's not already specified.
function addArg {
    local arg="${1}"
    [ $# -ge 1 ] && local val="${2}"
    if ! hasArg "${arg}" "${USER_ARGS[@]}"; then
        ARGS+=("${arg}")
        [ $# -ge 1 ] && ARGS+=("${val}")
    fi
}

# set up iptables rules and routing
# this allows rules/routing to be altered by supplying this function
# in an included file, such as ovpn_env.sh
function setupIptablesAndRouting {
    for route in "${OVPN_ROUTES[@]}"; do
	if [ ! "$(iptables -t nat -C POSTROUTING -s "$route" -o "$OVPN_NATDEVICE" -j MASQUERADE)" ]; then
	    echo "Adding routing for $route subnet on $OVPN_NATDEVICE"
	    iptables -t nat -A POSTROUTING -s "$route" -o "$OVPN_NATDEVICE" -j MASQUERADE
	fi
    done
    if [ ! "$(iptables -t nat -C POSTROUTING -s "$OVPN_SERVER" -o "$OVPN_NATDEVICE" -j MASQUERADE)" ]; then
	echo "Adding routing for $OVPN_SERVER subnet on $OVPN_NATDEVICE"
	iptables -t nat -A POSTROUTING -s "$OVPN_SERVER" -o "$OVPN_NATDEVICE" -j MASQUERADE
    fi
}


create_tun_device () {
    mkdir -p /dev/net
    if [ ! -c /dev/net/tun ]; then
    mknod /dev/net/tun c 10 200
    fi
}


add_client_networks ()  {
    local client client_network network netmask
    for client_network in $OVPN_CLIENT_NETWORKS; do
	if [ ! -d "$OPENVPN/ccd" ]; then
	    mkdir "$OPENVPN/ccd"
	fi
	client=$(echo "$client_network" | cut -d: -f1)
	network=$(echo "$client_network" | cut -d: -f2)
	netmask=$(echo "$client_network" | cut -d: -f3)
	echo "iroute $network $netmask" >> "${OPENVPN}/ccd/${client}"
    done
}


create_tun_device
add_client_networks
mangle_templates
# shellcheck source=/dev/null
. "$OPENVPN/ovpn_env.sh"
setup_dns_names "${@}"
add_control_socket

addArg "--config" "$OPENVPN/openvpn.conf"

if [ -d "$OPENVPN/ccd" ]; then
    addArg "--client-config-dir" "$OPENVPN/ccd"
fi

# When using --net=host, use this to specify nat device.
[ -z "$OVPN_NATDEVICE" ] && OVPN_NATDEVICE=eth0

# Setup NAT forwarding if requested
if [ "$OVPN_DEFROUTE" != "0" ] || [ "$OVPN_NAT" == "1" ] ; then
	# call function to setup iptables rules and routing
	# this allows rules to be customized by supplying
	# a replacement function in, for example, ovpn_env.sh
	setupIptablesAndRouting
fi

exec openvpn "${ARGS[@]}" "${USER_ARGS[@]}"
