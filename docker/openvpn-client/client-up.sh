#!/bin/sh


source /etc/openvpn/ovpn_env.sh


update_hosts () {
    if [ ! -f /etc/hosts.orig ]; then
	cp -a /etc/hosts /etc/hosts.orig
    fi
    cat /etc/hosts.orig > /etc/hosts
    printf "\n${1}" >> /etc/hosts;
}


update_resolver () {
    dev=$1
    search=$2
    domain=$3
    ns=$4
    dns="# Generated by openvpn for interface ${dev}\n"
    if [ -n "${search}" ] ; then
        dns="${dns}search ${domain} ${search}\n"
    elif [ -n "${domain}" ]; then
        dns="${dns}domain ${domain}\n"
    fi
    dns="${dns}${ns}"
    if [ -x /sbin/resolvconf ] ; then
        printf "${dns}" | /sbin/resolvconf -a "${dev}"
    else
        # Preserve the existing resolv.conf
        if [ -e /etc/resolv.conf ] ; then
            cp /etc/resolv.conf /etc/resolv.conf-"${dev}".sv
        fi
        printf "${dns}" > /etc/resolv.conf
        chmod 644 /etc/resolv.conf
    fi
}

add_dhcp_options () {
    if [ "${PEER_DNS}" == "no" ]; then
	return
    fi
    ns=
    domain=
    search=
    names=
    i=1
    while true ; do
        eval opt=\$foreign_option_${i}
        echo "Mangling $opt"
        [ -z "${opt}" ] && break
        if [ "${opt}" != "${opt#dhcp-option DOMAIN *}" ] ; then
	    if [ -z "${domain}" ] ; then
		domain="${opt#dhcp-option DOMAIN *}"
	    else
                search="${search}${search:+ }${opt#dhcp-option DOMAIN *}"
	    fi
        elif [ "${opt}" != "${opt#dhcp-option DNS *}" ] ; then
	    ns="${ns}nameserver ${opt#dhcp-option DNS *}\n"

        elif [ "${opt}" != "${opt#dhcp-option name *}" ] ; then
	    name=$(echo ${opt} | cut -d' ' -f3)
	    ip=$(echo $name | cut -d: -f2)
	    name=$(echo $name | cut -d: -f1)
	    names="${names}$ip\t$name\n"
        fi
        i=$((${i} + 1))
    done

    if [ -n "${ns}" ] ; then
	update_resolver $dev $search $domain $ns
    fi

    if [ -n "${names}" ]; then
	update_hosts "${names}"
    fi
}


add_port_forwarding_notworking () {
    for route_info in $OVPN_PORT_FORWARDS; do
	network=$(echo $route_info | cut -d: -f1)
	dport=$(echo $route_info | cut -d: -f2)
	to=$(echo $route_info | cut -d: -f3)
	toport=$(echo $route_info | cut -d: -f4)
	ip=$(getent hosts $to | awk '{ print $1 }')
	rule1="iptables -A PREROUTING -t nat -p tcp --dport $dport -j DNAT --to-destination $ip:$toport"
	echo "RULE1: $rule1"
	$rule1
	check_rule="iptables -C FORWARD -p tcp -d $to --dport $toport -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT"
	missing=$($check_rule &>/dev/null || echo "missing")
	if [ "$missing" ]; then
	    echo "Added FORWARD ACCEPT $ip $toport"
	    rule2="iptables -A FORWARD -p tcp -d $ip --dport $toport -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT"
	    echo "RULE2: $rule2"
	    $rule2
	fi
    done
}


add_port_forwarding () {
    killall -9 socat
    for route_info in $OVPN_PORT_FORWARDS; do
	network=$(echo $route_info | cut -d: -f1)
	dport=$(echo $route_info | cut -d: -f2)
	to=$(echo $route_info | cut -d: -f3)
	toport=$(echo $route_info | cut -d: -f4)
	ip=$(getent hosts $to | awk '{ print $1 }')
	socat -d -d -lmlocal2 \
	      TCP4-LISTEN:$dport,su=nobody,fork,bind=$network,reuseaddr  \
	      TCP4:$to:$toport &
	echo "Port forward created (socat) $network $dport -> $to $toport"
    done
}

add_dhcp_options
add_port_forwarding

exit 0
